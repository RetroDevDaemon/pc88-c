
unsigned char hexa[240] = { 
	253,0,15,253,119,2,253,0,28,253,119,2,253,0,2,253,
	119,2,253,0,24,253,119,2,253,0,6,253,119,2,253,0,
	20,253,119,2,253,0,10,253,119,2,253,0,16,253,119,2,
	253,0,14,253,119,2,253,0,12,253,119,2,253,0,18,253,
	119,2,253,0,8,253,119,2,253,0,22,253,119,2,253,0,
	4,253,119,2,253,0,26,253,119,2,254,2,0,119,253,0,
	30,254,2,119,112,253,0,30,254,2,7,112,253,0,30,254,
	2,7,112,253,0,30,254,2,7,112,253,0,30,254,2,7,
	112,253,0,30,254,2,7,112,253,0,30,254,2,7,119,253,
	0,30,254,2,119,0,253,119,2,253,0,26,253,119,2,253,
	0,4,253,119,2,253,0,22,253,119,2,253,0,8,253,119,
	2,253,0,18,253,119,2,253,0,12,253,119,2,253,0,14,
	253,119,2,253,0,16,253,119,2,253,0,10,253,119,2,253,
	0,20,253,119,2,253,0,6,253,119,2,253,0,24,253,119,
	2,253,0,2,253,119,2,253,0,28,253,119,2,253,0,14,
};

u8 PIXELPUSHBUFFER[8];
s8 PIXELBUFFERCYCLE = 0;
vu8* DRAW_LOCATION = (vu8*)0xc000;
u8 LAST_COLOR = 0;

void PushBufferByte()
{
    //take push buffer and conditionally set alu and write
    u8 i;
    u8 tempPx = 0;
    for(i = 0; i < 8; i++)
    {
        u8 ppba = PIXELPUSHBUFFER[i];
        if(LAST_COLOR != ppba)
        {
            *DRAW_LOCATION |= tempPx;
            SetIOReg(EXPANDED_ALU_CTRL, ppba);
            LAST_COLOR = ppba;
            tempPx = 0;
        }
        tempPx |= (0x80 >> i);
    }
}


// 11112222
// 12121212

void PushPixel(u8 val)
{
    /*
    set PIXELPUSHBUFFER[PIXELBUFFERCYCLE] to val 
    PBC++
    if pbc > 7 then 
        pushbuffer (cycle with conditional alu)
    draw loc ++
*/
    PIXELPUSHBUFFER[PIXELBUFFERCYCLE++] = val;
    if(PIXELBUFFERCYCLE > 7)
    {
        PushBufferByte();
        PIXELBUFFERCYCLE = 0;
        DRAW_LOCATION++;
    }
    //LAST_COLOR = val;
}

void DrawImage_V2_RLE(u8 x, u8 y, u8* src, s16 bytesize)
{// requires ALU to be enabled
    u8 wb, loop;
    u8 c;
    PIXELBUFFERCYCLE = 0;
    DRAW_LOCATION = (vu8*)(0xc000) + (y * 80) + x;


    while(bytesize > 0)
    {
        if (*src == 253)
        {
            src++;
            wb = *src++; // byte to write
            loop = *src; // num of times
            for(c = 0; c < loop; c++)
            {
                // New function that CREATES a function to write to the ALU with the correct set
                PushPixel(wb >> 4);
                PushPixel(wb & 0xf);
            }
        }
        else if(*src == 254)
        {
            src++;
            u8 l = *src++;
            // src = num of bytes to write through
            for(c = 0; c < l; c++)
            {
                PushPixel(*src >> 4);
                PushPixel(*src & 0xf);
                src++;
            }
        }
        else if(*src == 252)
        {
            src++;
            // write next byte raw, should be 0xfc - 0xfe
        }
        src++; 
        bytesize--;
    }
}
